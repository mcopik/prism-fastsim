#ifndef __MOTHER_H
#define __MOTHER_H

/**
 * @file Mother.hcl
 * 
 * @brief provides all commonly used functions and macros, which can be used together with the Mother-of-All algorithm operating on private, local or global memory. The parameter-set is taken from Agner Fog (http://agner.org/random/)
 * 
 * @author Philipp Otterbein
 */


#include "random.hcl"


#ifndef __MOTHER_LENGTH
	#define __MOTHER_LENGTH 5
#endif


inline void Mother_save( Mother_PRNG prng );
inline uint Mother_random( Mother_PRNG prng );


/**
 * \internal
 * This macro provides the code for the function 'float Mother_[s]rndFloat( Mother_PRNG );' returning random floats in the interval [0,1)
 */
__rnd_float( Mother, );

#include "normal_random_float.hcl"
__box_muller_float_fast( Mother, );


#ifndef DISABLE_DOUBLES
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
/**
 * \internal
 * This macro provides code for functions 'double Mother_[s]rndDouble32( Mother_PRNG );' returning random doubles with random 32bit mantissa in the interval [0,1) or [-1,1)
 */
__rnd_double32( Mother, );

/**
 * \internal
 * This macro provides code for functions 'double Mother_[s]rndDouble( Mother_PRNG );' returning random doubles with random 52bit mantissa in the interval [0,1) or [-1,1)
 */
__rnd_double( Mother, );

#include "normal_random_double.hcl"
__box_muller_double_fast( Mother, );
#endif


/**
 * \internal
 * The following methods are created here:
 *     inline int Mother_random_interval( Mother_PRNG, int min, int max );
 *     inline int Mother_random_intervalX( Mother_PRNG, int min, int max );
 *     inline int Mother_random_intervalX_const( Mother_PRNG, int min, int max );
 * For documentation: see random.hcl
 */
__rnd_int_interval( Mother, );
__rnd_int_intervalX( Mother, );
__rnd_int_intervalX_const( Mother, );



#ifdef DOXYGEN	
	__rnd_random_rejection_doc(Mother, );
	__rnd_rnd_rejection_doc(Mother, , float, Float);
	__rnd_rnd_rejection_doc(Mother, , double, Double);
	__rnd_rnd_rejection_doc(Mother, , double, Double32);
	__rnd_srnd_rejection_doc(Mother, , float, Float);
	__rnd_srnd_rejection_doc(Mother, , double, Double);
	__rnd_srnd_rejection_doc(Mother, , double, Double32);
	__rnd_interval_rejection_doc(Mother, , );
	__rnd_interval_rejection_doc(Mother, , X);
	__rnd_interval_rejection_doc(Mother, , X_const);
	__rnd_random_rejection_complex_doc(Mother, );
	__rnd_rnd_rejection_complex_doc(Mother, , float, Float);
	__rnd_rnd_rejection_complex_doc(Mother, , double, Double);
	__rnd_rnd_rejection_complex_doc(Mother, , double, Double32);
	__rnd_srnd_rejection_complex_doc(Mother, , float, Float);
	__rnd_srnd_rejection_complex_doc(Mother, , double, Double);
	__rnd_srnd_rejection_complex_doc(Mother, , double, Double32);
	__rnd_interval_rejection_complex_doc(Mother, , );
	__rnd_interval_rejection_complex_doc(Mother, , X);
	__rnd_interval_rejection_complex_doc(Mother, , X_const);
	
	
	__rnd_random_filter_doc(Mother, );
	__rnd_rnd_filter_doc(Mother, , float, Float);
	__rnd_rnd_filter_doc(Mother, , double, Double);
	__rnd_rnd_filter_doc(Mother, , double, Double32);
	__rnd_srnd_filter_doc(Mother, , float, Float);
	__rnd_srnd_filter_doc(Mother, , double, Double);
	__rnd_srnd_filter_doc(Mother, , double, Double32);
	__rnd_interval_filter_doc(Mother, , );
	__rnd_interval_filter_doc(Mother, , X);
	__rnd_interval_filter_doc(Mother, , X_const);
	__rnd_random_filter_complex_doc(Mother, )
	__rnd_rnd_filter_complex_doc(Mother, , float, Float);
	__rnd_rnd_filter_complex_doc(Mother, , double, Double);
	__rnd_rnd_filter_complex_doc(Mother, , double, Double32);
	__rnd_srnd_filter_complex_doc(Mother, , float, Float);
	__rnd_srnd_filter_complex_doc(Mother, , double, Double);
	__rnd_srnd_filter_complex_doc(Mother, , double, Double32);
	__rnd_interval_filter_complex_doc(Mother, , );
	__rnd_interval_filter_complex_doc(Mother, , X);
	__rnd_interval_filter_complex_doc(Mother, , X_const);
#endif
	


#if ( !(defined DOXYGEN) && !(defined DISABLE_VAR_MACROS) )

/**
 * This macro is a wrapper for __rnd_rejection
 */
#define Mother_generic_rejection( return_type, prng_method, dest, prng, acceptance_func, ... ) __rnd_rejection( return_type, prng_method, (dest), prng, acceptance_func, ##__VA_ARGS__ )

/**
 * The macro Mother_<method>_rejection creates a rejection loop which returns a random number created by Mother_<method> and accepeted by a acceptance method. Mother_<method> has to have one argument
 * @param[out] dest pointer to a memory location. result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param acceptance_func acceptance method which decides whether to accept random number or not. It has the signature 'bool \b acceptance_func( return type of Mother_<method>, ...)' and its first argument is the random number generated by Mother_<method>
 * @param ... this optional arguments are redirected to \b acceptance_func
 */
#define Mother_random_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( uint, Mother_random, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#define Mother_rndFloat_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( float, Mother_rndFloat, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#define Mother_srndFloat_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( float, Mother_srndFloat, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#ifndef DISABLE_DOUBLES
#define Mother_rndDouble32_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( double, Mother_rndDouble32, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble32_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( double, Mother_srndDouble32, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#define Mother_rndDouble_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( double, Mother_rndDouble, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble_rejection( dest, prng, acceptance_func, ... ) __rnd_rejection( double, Mother_srndDouble, (dest), prng, acceptance_func, ##__VA_ARGS__ )
#endif


/**
 * This macro is a wrapper for __rnd_rejection_interval
 */
#define Mother_generic_interval_rejection( return_type, prng_method, dest, prng, min, max, acceptance_func, ... ) __rnd_rejection_interval( return_type, prng_method, (dest), prng, (min), (max), acceptance_func, ##__VA_ARGS__ )

/**
 * The macro Mother_random_interval[{X,X_const}]_rejection creates a rejection loop which returns a random integer created by Mother_random_interval[{X,X_const}] and accepeted by a acceptance method.
 * @param[out] dest pointer to a memory location. result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] min lower bound of the random integer created by Mother_random_interval[{X,X_const}]
 * @param[in] max upper bound of the random integer created by Mother_random_interval[{X,X_const}]
 * @param acceptance_func acceptance method which decides whether to accept random number or not. It has the signature 'bool \b acceptance_func( int, ...)' and its first argument is the random integer generated by Mother_random_interval[{X,X_const}]
 * @param ... this optional arguments are redirected to \b acceptance_func
 */ 
#define Mother_random_interval_rejection( dest, prng, min, max, acceptance_func, ... ) __rnd_rejection_interval( int, Mother_random_interval, (dest), prng, (min), (max), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_rejection( dest, prng, min, max, acceptance_func, ... ) __rnd_rejection_interval( int, Mother_random_intervalX, (dest), prng, (min), (max), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_const_rejection( dest, prng, min, max, acceptance_func, ... ) __rnd_rejection_interval( int, Mother_random_intervalX_const, (dest), prng, (min), (max), acceptance_func, ##__VA_ARGS__ )



/**
 * This macro is a wrapper for __rnd_rejection_complex
 */
#define Mother_generic_rejection_complex( return_type, prng_method, dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( return_type, prng_method, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )

/**
 * The macro Mother_<method>_rejection_complex creates a rejection loop which returns a result chosen by a acceptance method and is derived from \b n random numbers generated by Mother_<method>. Mother_<method> has to have one argument
 * @param[out] dest pointer to a memory location. result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] n compile-time constant, number of random numbers to generate as input for \b acceptance_func.
 * @param acceptance_func acceptance method which decides whether to accept random number or not and stores them in \b dest. It has the signature 'bool \b acceptance_func( __private typeof(\b dest), const 'return type of Mother_<method>' *const, ...)' and its first argument is the array of \b n random numbers generated by Mother_<method>
 * @param ... this optional arguments are redirected to \b acceptance_func
 */ 
#define Mother_random_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( uint, Mother_random, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndFloat_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( float, Mother_rndFloat, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndFloat_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( float, Mother_srndFloat, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#ifndef DISABLE_DOUBLES
#define Mother_rndDouble32_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( double, Mother_rndDouble32, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble32_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( double, Mother_srndDouble32, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndDouble_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( double, Mother_rndDouble, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble_rejection_complex( dest, prng, n, acceptance_func, ... ) __rnd_rejection_complex( double, Mother_srndDouble, (dest), prng, (n), acceptance_func, ##__VA_ARGS__ )
#endif


/**
 * This macro is a wrapper for __rnd_interval_rejection_complex
 */
#define Mother_generic_interval_rejection_complex( return_type, prng_method, dest, prng, min, max, n, acceptance_func, ... ) __rnd_rejection_interval_complex( return_type, prng_method, (dest), prng, (min), (max), (n), acceptance_func, ##__VA_ARGS__ )

/**
 * The macro Mother_random_interval[{X,X_const}]_rejection_complex creates a rejection loop which returns a result chosen by a acceptance method and derived from \b n random integers generated by Mother_random_interval[{X,X_const}].
 * @param[out] dest pointer to a memory location. result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] min lower bound of random integer generated by Mother_random_interval[{X,X_const}]
 * @param[in] max upper bound of random integer generated by Mother_random_interval[{X,X_const}]
 * @param[in] n compile-time constant, number of random numbers to generate as input for \b acceptance_func.
 * @param acceptance_func acceptance method which decides whether to accept random number or not and stores them in \b dest. It has the signature 'bool \b acceptance_func( __private typeof(\b dest), const int* const, ...)' and its first argument is the array of \b n random integers generated by Mother_random_interval[X]
 * @param ... this optional arguments are redirected to \b acceptance_func
 */ 
#define Mother_random_interval_rejection_complex( dest, prng, min, max, n, acceptance_func, ... ) __rnd_rejection_interval_complex( int, Mother_random_interval, (dest), prng, (min), (max), (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_rejection_complex( dest, prng, min, max, n, acceptance_func, ... ) __rnd_rejection_interval_complex( int, Mother_random_intervalX, (dest), prng, (min), (max), (n), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_const_rejection_complex( dest, prng, min, max, n, acceptance_func, ... ) __rnd_rejection_interval_complex( int, Mother_random_intervalX_const, (dest), prng, (min), (max), (n), acceptance_func, ##__VA_ARGS__ )



/**
 * This macro is a wrapper for __rnd_filter
 */
#define Mother_generic_filter( prng_method, dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( prng_method, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )

/**
 * The Mother_<method>_filter returns random numbers generated by Mother_<method> which are accepted by a acceptance method. Mother_<method> has to have one argument
 * @param[out] dest pointer to memory location, result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in,out] temp_array array in local or global memory with the number of elements equal to the work-group size. Accepted random numbers are stored in \b temp_array
 * @param acceptance_func acceptance method wich decides whether to accept a random number or not. It has the signature 'bool \b acceptance_func( return type of Mother_<method>, ...)' and its first argument is the random number generated by Mother_<method>
 * @param ... this optional arguments are redirected to \b acceptance_func
 */
#define Mother_random_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_random, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndFloat_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_rndFloat, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndFloat_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_srndFloat, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#ifndef DISABLE_DOUBLES
#define Mother_rndDouble32_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_rndDouble32, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble32_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_srndDouble32, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndDouble_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_rndDouble, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble_filter( dest, prng, temp_array, acceptance_func, ... ) __rnd_filter( Mother_srndDouble, (dest), prng, (temp_array), acceptance_func, ##__VA_ARGS__ )
#endif


/**
 * This macro is a wrapper for __rnd_filter_interval
 */
#define Mother_generic_interval_filter( prng_method, dest, prng, min, max, temp_array, acceptance_func, ... ) __rnd_filter_interval( prng_method, (dest), prng, (min), (max), (temp_array), acceptance_func, ##__VA_ARGS__ )

/**
 * The Mother_random_interval[{X,X_const}]_filter returns random integers generated by Mother_random_interval[{X,X_const}] which are accepted by a acceptance method.
 * @param[out] dest pointer to memory location, result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] min lower bound of random integer generated by Mother_random_interval[{X,X_const}]
 * @param[in] max upper bound of random integer generated by Mother_random_interval[{X,X_const}]
 * @param[in,out] temp_array array in local or global memory with the number of elements equal to the work-group size. Accepted random numbers are stored in \b temp_array
 * @param acceptance_func acceptance method wich decides whether to accept a random number or not. It has the signature 'bool \b acceptance_func( int, ...)' and its first argument is the random number generated by Mother_random_interval[X]
 * @param ... this optional arguments are redirected to \b acceptance_func
 */
#define Mother_random_interval_filter( dest, prng, min, max, temp_array, acceptance_func, ... ) __rnd_filter_interval( Mother_random_interval, (dest), prng, (min), (max), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_filter( dest, prng, min, max, temp_array, acceptance_func, ... ) __rnd_filter_interval( Mother_random_intervalX, (dest), prng, (min), (max), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_const_filter( dest, prng, min, max, temp_array, acceptance_func, ... ) __rnd_filter_interval( Mother_random_intervalX_const, (dest), prng, (min), (max), (temp_array), acceptance_func, ##__VA_ARGS__ )



/**
 * This macro is a wrapper for __rnd_filter_complex
 */
#define Mother_generic_filter_complex( return_type, prng_method, dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( return_type, prng_method, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )

/**
 * The Mother_<method>_filter_complex returns a result which is chosen by a acceptance method and derived from \b n random numbers generated by Mother_<method>. Mother_<method> has to have one argument
 * @param[out] dest pointer to memory location, result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] n compile-time constant, number of random numbers to generate as input for \b acceptance_func.
 * @param[in,out] temp_array array in local or global memory with the number of elements equal to the work-group size. Accepted random numbers are stored in \b temp_array
 * @param acceptance_func acceptance method wich decides whether to accept a result or not. It has the signature 'bool \b acceptance_func( __private typeof(\b dest), const 'return type of Mother_<method>' *const, ...)' and \b acceptance_func has to write its results to the first argument. The second argument is the array of \b n random numbers generated by Mother_<method>
 * @param ... this optional arguments are redirected to \b acceptance_func
 */
#define Mother_random_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( uint, Mother_random, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndFloat_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( float, Mother_rndFloat, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndFloat_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( float, Mother_srndFloat, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#ifndef DISABLE_DOUBLES
#define Mother_rndDouble32_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( double, Mother_rndDouble32, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble32_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( double, Mother_srndDouble32, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_rndDouble_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( double, Mother_rndDouble, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_srndDouble_filter_complex( dest, prng, n, temp_array, acceptance_func, ... ) __rnd_filter_complex( double, Mother_srndDouble, (dest), prng, (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#endif


/**
 * This macro is a wrapper for __rnd_filter_interval_complex
 */
#define Mother_generic_interval_filter_complex( return_type, prng_method, dest, prng, min, max, n, temp_array, acceptance_func, ... ) __rnd_filter_interval_complex( return_type, prng_method, (dest), prng, (min), (max), (n), (temp_array), acceptance_func, ##__VA_ARGS__ )

/**
 * The Mother_random_interval[{X,X_const}]_filter_complex returns a result which is chosen by a acceptance method and derived from \b n random integers generated by Mother_random_interval[{X,X_const}].
 * @param[out] dest pointer to memory location, result is returned in \b dest
 * @param prng PRNG object to use for random number generation
 * @param[in] min int, lower bound of random integers generated by Mother_random_interval[{X,X_const}]
 * @param[in] max int, upper bound of random integers generated by Mother_random_interval[{X,X_const}]
 * @param[in] n compile-time constant, number of random numbers to generate as input for \b acceptance_func.
 * @param[in,out] temp_array array in local or global memory with the number of elements equal to the work-group size. Accepted random numbers are stored in \b temp_array
 * @param acceptance_func acceptance method wich decides whether to accept a result or not. It has the signature 'bool \b acceptance_func( __private typeof(\b dest), const int *const, ...)' and \b acceptance_func has to write its results to the first argument. The second argument are the \b n random numbers generated by Mother_random_interval[X]
 * @param ... this optional arguments are redirected to \b acceptance_func
 */
#define Mother_random_interval_filter_complex( dest, prng, min, max, n, temp_array, acceptance_func, ... ) __rnd_filter_interval_complex( int, Mother_random_interval, (dest), prng, (min), (max), (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_filter_complex( dest, prng, min, max, n, temp_array, acceptance_func, ... ) __rnd_filter_interval_complex( int, Mother_random_intervalX, (dest), prng, (min), (max), (n), (temp_array), acceptance_func, ##__VA_ARGS__ )
#define Mother_random_intervalX_const_filter_complex( dest, prng, min, max, n, temp_array, acceptance_func, ... ) __rnd_filter_interval_complex( int, Mother_random_intervalX_const, (dest), prng, (min), (max), (n), (temp_array), acceptance_func, ##__VA_ARGS__ )


#endif


#ifndef DISABLE_VAR_MACROS
#ifndef DISABLE_DOUBLES
/**
 * \internal
 * The following methods are created here:
 *     inline double Mother_exp_distr_double[_fast]( Mother_PRNG );
 */
__rnd_exp_distr_double( Mother, );

__box_muller_double( Mother, );

#if ((defined ZIGGURAT_NORMAL) || (defined ZIGGURAT_NORMAL_DOUBLE))
	__ziggurat_normal_double( Mother, );
#endif
#endif


/**
 * \internal
 * The following methods are created here:
 *     inline float Mother_exp_distr_float( Mother_PRNG );
 */
__rnd_exp_distr_float( Mother, );

__box_muller_float( Mother, );
__box_muller_float_native( Mother, );

#if ((defined ZIGGURAT_NORMAL) || (defined ZIGGURAT_NORMAL_FLOAT))
	__ziggurat_normal_float( Mother, );
#endif
#endif



#endif